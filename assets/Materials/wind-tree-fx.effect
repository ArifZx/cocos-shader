// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - name: gradient
    passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        deptTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties: &props
        speed: { value: 1.0 }
        minStrength: { value: 0.05, editor: { range: [0.0, 1.0, 0.01] } }
        maxStrength: { value: 0.05, editor: { range: [0.0, 1.0, 0.01] } }
        strengthScale: { value: 100.0 }
        detail: { value: 1.0 }
        distortion: { value: 0.05, editor: { range: [0.0, 1.0, 0.01] } }
        heightOffset: { value: 0.05, editor: { range: [0.0, 1.0, 0.01] } }
        offset: { value: 1.0 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  uniform Wind{
    float speed;
    float minStrength;
    float maxStrength;
    float strengthScale;
    float interval;
    float detail;
    float distortion;
    float heightOffset;
    float offset;
  };   

  float getWind(vec2 vert, vec2 uv, float time) {
    float diff = pow(maxStrength-minStrength, 2.0);
    float strength = clamp(minStrength + diff + sin(time/interval) * diff, minStrength, maxStrength) * strengthScale;
    float wind = (sin(time) + cos(time*detail)) * strength * max(0.0, (1.0-uv.y) - heightOffset);
    return wind;
  }

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    float time = cc_time.x * speed + offset;
    pos.x += getWind(pos.xy, uv0, time);

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
    vec4 o = vec4(1.0, 1.0, 1.0, 1.0);

    #if USE_TEXTURE            
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0); 
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif


    o *= color;

    ALPHA_TEST(o);
    return o;
  }
}%

